{"version":3,"sources":["util/Spotify.js","Components/SearchBar/SearchBar.js","Components/Track/Track.js","Components/TrackList/TrackList.js","Components/SearchResults/SearchResults.js","Components/Playlist/Playlist.js","Components/App/App.js","reportWebVitals.js","index.js"],"names":["accessToken","SearchBar","props","state","term","search","bind","handleTermChange","this","onSearch","event","setState","target","value","className","placeholder","onChange","onClick","React","Component","Track","addTrack","removeTrack","onRemove","track","onAdd","isRemoval","classname","name","artist","album","renderAction","TrackList","tracks","map","id","SearchResults","searchResults","Playlist","handleNameChange","onNameChage","defaultValue","playlistTracks","onSave","Spotify","getAccessToken","fetch","header","Authorization","then","response","json","jsonResponse","items","artists","uri","accessTokenMatch","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","savePlaylist","playlistName","tracksUris","headers","userId","method","body","JSON","stringify","playlistID","uris","App","updatePlaylistName","trackURIs","filter","currentTrack","find","savedTrack","push","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bdd9ac17.chunk.js","sourcesContent":["let accessToken;\r\nconst clientId = \"75e1d0213ab1433ebada0c3c32dc6770\";\r\nconst redirectUrl = \"http://localhost:3000/callback/\";\r\n\r\nconst Spotify = {\r\n\r\n    search(term) {\r\n        const accessToken = Spotify.getAccessToken();\r\n        return fetch(`https://api.spotify.com/v1/search?type=track&q=${term}`, { header: {Authorization: `Bearer ${accessToken}`}})\r\n                .then(response => response.json())\r\n                .then(jsonResponse => {\r\n                    if (!jsonResponse.tracks) {\r\n                        return [{id:-1,name:\"None\",artist:\"None\",album:\"None\",uri:-1}];\r\n                    }\r\n\r\n                    return jsonResponse.tracks.items.map(track => ({\r\n                        id: track.id,\r\n                        name: track.name,\r\n                        artist: track.artists[0].name,\r\n                        album: track.album.name,\r\n                        uri: track.uri\r\n                    }))\r\n                });\r\n    },\r\n\r\n    getAccessToken() {\r\n        if(accessToken) {\r\n            return accessToken;\r\n        }\r\n\r\n        const accessTokenMatch = window.location.href.match(/access_token=([^&]*)/);\r\n        const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\r\n\r\n        if (accessTokenMatch && expiresInMatch) {\r\n            accessToken = accessTokenMatch[1];\r\n            const expiresIn = Number(expiresInMatch[1]);\r\n            window.setTimeout(() => accessToken = '', expiresIn * 1000);\r\n            window.history.pushState('Access Token', null, '/');\r\n            return accessToken;\r\n        } else {\r\n            const accessUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirectUrl}`;\r\n            window.location = accessUrl;\r\n        }\r\n    },\r\n\r\n    savePlaylist(playlistName, tracksUris) {\r\n        if (!playlistName || !tracksUris) {\r\n            return;\r\n        }\r\n\r\n        let accessToken = Spotify.getAccessToken();\r\n        const headers = { Authorization: `Bearer ${accessToken}`};\r\n        let userId = '';\r\n\r\n        return fetch(\"https://api.spotify.com/v1/me\", { headers: headers})\r\n        .then(response => response.json())\r\n        .then(jsonResponse => {\r\n            userId = jsonResponse.id;\r\n            return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\r\n                headers: headers,\r\n                method: 'POST',\r\n                body: JSON.stringify({name : playlistName})\r\n            }).then(response => response.json())\r\n            .then(jsonResponse => {\r\n                const playlistID = jsonResponse.id;\r\n                return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistID}/tracks`, {\r\n                    headers: headers,\r\n                    method: \"POST\",\r\n                    body: JSON.stringify({uris: tracksUris})\r\n                })\r\n            })\r\n        })\r\n    }\r\n}\r\n\r\nexport default Spotify;","import React from \"react\";\r\nimport \"./SearchBar.css\";\r\n\r\nclass SearchBar extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {term: ''};\r\n\r\n        this.search = this.search.bind(this);\r\n        this.handleTermChange = this.handleTermChange.bind(this);\r\n    }\r\n\r\n    search() {\r\n        this.props.onSearch(this.state.term)\r\n    }\r\n\r\n    handleTermChange(event) {\r\n        this.setState({ term: event.target.value });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"SearchBar\">\r\n                <input placeholder=\"Enter A Song, or Artist\" onChange={this.handleTermChange} />\r\n                <button className=\"SearchButton\" onClick={this.search}>SEARCH</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchBar;","import React from \"react\";\r\nimport \"./Track.css\";\r\n\r\nclass Track extends React.Component {\r\n    \r\n    constructor(props) {\r\n        super(props);\r\n        this.addTrack = this.addTrack.bind(this);\r\n        this.removeTrack = this.removeTrack.bind(this);\r\n    }\r\n\r\n    removeTrack() {\r\n        this.props.onRemove(this.props.track);\r\n    }\r\n\r\n    addTrack() {\r\n        this.props.onAdd(this.props.track);\r\n    }\r\n\r\n    renderAction() {\r\n        if (this.props.isRemoval) {\r\n            return <button classname=\"Track-action\" onClick={this.removeTrack}>-</button>\r\n        } else {\r\n            return <button classname=\"Track-action\" onClick={this.addTrack}>+</button>\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        return (\r\n            <div className=\"Track\">\r\n                <div className=\"Track-information\">\r\n                    <h3>{this.props.track.name}</h3>\r\n                    <p>{this.props.track.artist} | {this.props.track.album}</p>\r\n                </div>\r\n                {this.renderAction()}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Track;","import React from \"react\";\r\nimport \"./TrackList.css\";\r\n\r\nimport Track from \"../Track/Track\";\r\n\r\nclass TrackList extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"TrackList\">\r\n                {\r\n                    this.props.tracks.map(track => <Track track={track} key={track.id} onAdd={this.props.onAdd} onRemove={this.props.onRemove} isRemoval={this.props.isRemoval} />)\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TrackList;","import React from \"react\";\r\nimport \"./SearchResults.css\";\r\nimport TrackList from \"../TrackList/TrackList\";\r\n\r\nclass SearchResults extends React.Component {\r\n    render() {\r\n        return(\r\n            <div className=\"SearchResults\">\r\n                <h2>Results</h2>\r\n                <TrackList tracks={this.props.searchResults} onAdd={this.props.onAdd} isRemoval={false} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SearchResults;","import React from \"react\";\r\nimport TrackList from \"../TrackList/TrackList\";\r\nimport \"./Playlist.css\";\r\n\r\nclass Playlist extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleNameChange = this.handleNameChange.bind(this);\r\n    }\r\n\r\n    handleNameChange(event) {\r\n        this.props.onNameChage(event.target.value)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Playlist\">\r\n                <input defaultValue={\"New Playlist\"} onChange={this.handleNameChange} />\r\n                <TrackList tracks={this.props.playlistTracks} onRemove={this.props.onRemove} isRemoval={true} />\r\n                <button className=\"Playlist-save\" onClick={this.props.onSave}>SAVE TO SPOTIFY</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Playlist;","import React from 'react';\nimport './App.css';\n\nimport SearchBar from \"../SearchBar/SearchBar\";\nimport SearchResults from '../SearchResults/SearchResults';\nimport Playlist from \"../Playlist/Playlist\";\nimport Spotify from '../../util/Spotify';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchResults: [],\n      playlistName: \"New Playlist\",\n      playlistTracks: []\n    }\n\n    this.addTrack = this.addTrack.bind(this);\n    this.removeTrack = this.removeTrack.bind(this);\n    this.updatePlaylistName = this.updatePlaylistName.bind(this);\n    this.savePlaylist = this.savePlaylist.bind(this);\n    this.search = this.search.bind(this);\n  }\n\n  search(term) {\n    Spotify.search(term).then(searchResults => {\n      this.setState({ searchResults: searchResults })\n    });\n  }\n\n  savePlaylist() {\n    const trackURIs = this.state.playlistTracks.map(track => track.uri);\n    Spotify.savePlaylist(this.state.playlistName, trackURIs).then(() => {\n      this.setState({playlistName: \"New Playlist\"});\n      this.setState({playlistTracks: []});\n    })\n  }\n\n  updatePlaylistName(name) {\n    this.setState({ playlistName: name });\n  }\n\n  removeTrack(track) {\n    let tracks = this.state.playlistTracks;\n    tracks = tracks.filter(currentTrack => currentTrack.id !== track.id);\n\n    this.setState({ playlistTracks: tracks });\n  }\n\n  addTrack(track) {\n    let playlistTracks = this.state.playlistTracks;\n    if (playlistTracks.find(savedTrack => savedTrack.id === track.id)) {\n      return;\n    } else {\n      playlistTracks.push(track);\n      this.setState({ playlistTracks: playlistTracks });\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n        <div className=\"App\">\n            <SearchBar onSearch={this.search}/>\n            <div className=\"App-playlist\">\n                <SearchResults searchResults={this.state.searchResults} onAdd={this.addTrack} />\n                <Playlist playlistName={this.state.playlistName} \n                          playlistTracks={this.state.playlistTracks} \n                          onRemove={this.removeTrack} \n                          onNameChage={this.updatePlaylistName}\n                          onSave={this.savePlaylist} />\n            </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App\n\n// import React from 'react';\n// import './App.css';\n\n// import Playlist from '../Playlist/Playlist';\n// import SearchBar from '../SearchBar/SearchBar';\n// import SearchResults from '../SearchResults/SearchResults';\n// import Spotify from '../../util/Spotify';\n\n// class App extends React.Component {\n//   constructor(props) {\n//     super(props);\n\n//     this.state = {\n//       searchResults: [],\n//       playlistName: 'New Playlist',\n//       playlistTracks: []\n//     };\n\n//     this.search = this.search.bind(this);\n//     this.addTrack = this.addTrack.bind(this);\n//     this.removeTrack = this.removeTrack.bind(this);\n//     this.updatePlaylistName = this.updatePlaylistName.bind(this);\n//     this.savePlaylist = this.savePlaylist.bind(this);\n//   }\n\n//   search(term) {\n//     Spotify.search(term).then(searchResults => {\n//       this.setState({searchResults: searchResults});\n//     });\n//   }\n\n//   addTrack(track) {\n//     let tracks = this.state.playlistTracks;\n//     if (tracks.find(savedTrack => savedTrack.id === track.id)) {\n//       return;\n//     }\n\n//     tracks.push(track);\n//     this.setState({playlistTracks: tracks});\n//   }\n\n//   removeTrack(track) {\n//     let tracks = this.state.playlistTracks;\n//     tracks = tracks.filter(currentTrack => currentTrack.id !== track.id);\n\n//     this.setState({playlistTracks: tracks});\n//   }\n\n//   updatePlaylistName(name) {\n//     this.setState({playlistName: name});\n//   }\n\n//   savePlaylist() {\n//     const trackUris = this.state.playlistTracks.map(track => track.uri);\n//     Spotify.savePlaylist(this.state.playlistName, trackUris).then(() => {\n//       this.setState({\n//         playlistName: 'New Playlist',\n//         playlistTracks: []\n//       });\n//     });\n//   }\n\n//   render() {\n//     return (\n//       <div>\n//         <h1>Ja<span className=\"highlight\">mmm</span>ing</h1>\n//         <div className=\"App\">\n//           <SearchBar onSearch={this.search} />\n//           <div className=\"App-playlist\">\n//             <SearchResults searchResults={this.state.searchResults}\n//                            onAdd={this.addTrack} />\n//             <Playlist playlistName={this.state.playlistName}\n//                       playlistTracks={this.state.playlistTracks}\n//                       onNameChange={this.updatePlaylistName}\n//                       onRemove={this.removeTrack}\n//                       onSave={this.savePlaylist} />\n//           </div>\n//         </div>\n//       </div>\n//     );\n//   }\n// }\n\n// export default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}